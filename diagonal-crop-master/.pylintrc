[MASTER]

# Pickle collected data for later comparisons.
persistent=no


[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once).
#   I0011 disable warning about disabling warnings (!)
#   W0142 allow * and ** "magic"
#   WO511 TODO warnings
#   E1103 missing member when types could not be inferred
#   R0903 too few public methods
disable=I0011,W0142,W0511,E1103,R0903,missing-docstring


[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html
#output-format=parseable
msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}

# Tells whether to display a full report or only the messages
reports=no


[BASIC]

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input

# Regular expression which should only match correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which should only match correct module level names
const-rgx=(([A-z_][A-z0-9_]*)|(__.*__))$

# Regular expression which should only match correct class names
class-rgx=_?[A-Z][a-zA-Z0-9]+$

# Regular expression which should only match correct function names
function-rgx=([a-z_][a-z0-9_]+)|(_?[a-z][a-zA-Z0-9]+)$

# Regular expression which should only match correct method names
method-rgx=([a-z_][a-z0-9_]+)|(_?[a-z][a-zA-Z0-9]+)$

# Regular expression which should only match correct instance attribute names
attr-rgx=[a-z_][a-z0-9_]+$

# Regular expression which should only match correct argument names
argument-rgx=[a-z_][a-z0-9_]+$

# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-z0-9_]+$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz

# Regular expression which should only match functions or classes name which do
# not require a docstring
no-docstring-rgx=__.*__|_.*


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=100

# Maximum number of lines in a module
max-module-lines=2000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes=SQLObject

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent


[VARIABLES]

# A regular expression matching the beginning of the name of dummy variables
# (i.e. not used).
dummy-variables-rgx=_|dummy|unused


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception